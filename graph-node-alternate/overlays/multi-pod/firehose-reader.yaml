---
apiVersion: v1
kind: Service
metadata:
  name: persistencecore-firehose-reader
  labels:
    app.kubernetes.io/name: persistencecore-firehose-reader
spec:
  clusterIP: None
  ports:
    - name: firehose-reader
      port: 9000
      protocol: TCP
      targetPort: 9000
  selector:
    app.kubernetes.io/name: persistencecore-firehose-reader
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: persistencecore-firehose-reader
spec:
  serviceName: persistencecore-firehose-reader
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/instance: persistencecore
      app.kubernetes.io/name: persistencecore-firehose-reader
  template:
    metadata:
      annotations:
        quality: release
        role: api-gateway
        sla: high
        tier: gateway
      labels:
        app.kubernetes.io/instance: persistencecore
        app.kubernetes.io/type: persistencecore-firehose-reader
        app.kubernetes.io/name: persistencecore-firehose-reader
        app.kubernetes.io/version: '0.1'
    spec:
      terminationGracePeriodSeconds: 10
      initContainers:
        - name: wait-for-genesis
          image: persistenceone/persistencecore:v7.0.3-fh
          imagePullPolicy: Always
          env:
            - name: GENESIS_NODE_DATA_RESOLUTION_METHOD
              valueFrom:
                configMapKeyRef:
                  key: sync_node.resolution_method
                  name: firehose-node-config
            - name: GENESIS_HOST
              valueFrom:
                configMapKeyRef:
                  key: sync_node.host
                  name: firehose-node-config
            - name: GENESIS_PORT
              valueFrom:
                configMapKeyRef:
                  key: sync_node.exposer_port
                  name: firehose-node-config
          command:
            - bash
            - "-c"
            - |
              # Do the following if the resolution method is dynamic else skip (we assume that in static configuration peer node is already up)
              if [ "$GENESIS_NODE_DATA_RESOLUTION_METHOD" = "DYNAMIC" ]; then
                while [ $(curl -sw '%{http_code}' http://$GENESIS_HOST:$GENESIS_PORT/node_id -o /dev/null) -ne 200 ]; do
                  echo "Genesis validator does not seem to be ready. Waiting for it to start..."
                  sleep 10;
                done
              fi
              echo "Ready to start"
              exit 0
        - name: init-firehose-node
          image: persistenceone/persistencecore:v7.0.3-fh
          imagePullPolicy: Always
          env:
            - name: CHAIN_ID
              valueFrom:
                configMapKeyRef:
                  key: chain.id
                  name: persistencecore
            - name: HOME_DIR
              value: /persistencecore
            - name: GENESIS_HOST
              valueFrom:
                configMapKeyRef:
                  key: sync_node.host
                  name: firehose-node-config
            # We support 2 types of resolution methods: (dynamic, static), if the resolution method is dynamic then we fetch the node id
            # on the fly from the exposer app exposed service on the specified port, otherwise it is required that the node id is 
            # specified exactly as an environment variable
            - name: GENESIS_NODE_DATA_RESOLUTION_METHOD
              valueFrom:
                configMapKeyRef:
                  key: sync_node.resolution_method
                  name: firehose-node-config
            - name: GENESIS_EXPOSER_PORT
              valueFrom:
                configMapKeyRef:
                  key: sync_node.exposer_port
                  name: firehose-node-config
            # This URL is used to fetch the genesis json if the NODE_DATA_RESOLUTION_METHOD is static
            - name: GENESIS_JSON_FETCH_URL
              valueFrom:
                configMapKeyRef:
                  key: sync_node.genesis_json_fetch_url
                  name: firehose-node-config
            - name: GENESIS_PORT_P2P
              valueFrom:
                configMapKeyRef:
                  key: sync_node.port_p2p
                  name: firehose-node-config
            - name: STATE_RESTORE_SNAPSHOT_URL
              valueFrom:
                configMapKeyRef:
                  key: snapshot_restore_url
                  name: firehose-node-config
            - name: SEEDS
              valueFrom:
                configMapKeyRef:
                  key: seeds
                  name: firehose-node-config
            - name: FIRST_STREAMABLE_BLOCK
              valueFrom:
                configMapKeyRef:
                  key: first_streamable_block
                  name: firehose-node-config
            - name: FORCE_INIT
              valueFrom:
                configMapKeyRef:
                  key: force_init
                  name: firehose-node-config
          command:
            - bash
            - "-c"
            - |
              bash /scripts/init-firehose-node.sh

              echo "Installing firecosmos if not already installed"

              # Install firecosmos if not already installed
              if [ ! -f /persistencecore/bin/firecosmos ]; then
                wget https://github.com/figment-networks/firehose-cosmos/releases/download/v0.6.0/firecosmos_linux_amd64 -O firecosmos
                chmod +x firecosmos
                mkdir -p /persistencecore/bin
                mv firecosmos /persistencecore/bin/firecosmos
              fi
          resources:
            limits:
              cpu: "1"
              memory: "1G"
            requests:
              cpu: "1"
              memory: "1G"
          volumeMounts:
            - mountPath: /persistencecore
              name: node-pv-storage
            - mountPath: /config-graph
              name: config-graph
            - mountPath: /scripts
              name: scripts-graph
      containers:
        - name: firehose-node
          image: persistenceone/persistencecore:v7.0.3-fh
          imagePullPolicy: Always
          env:
            - name: CHAIN_ID
              valueFrom:
                configMapKeyRef:
                  key: chain.id
                  name: persistencecore
            - name: HOME_DIR
              value: /persistencecore
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: aws_access_key_id
                  name: firehose-node-aws-credentials
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: aws_secret_access_key
                  name: firehose-node-aws-credentials
            - name: ONE_BLOCK_STORE_URL
              valueFrom:
                configMapKeyRef:
                  key: one_block_store_url
                  name: firehose-node-config
            - name: MERGED_BLOCKS_STORE_URL
              valueFrom:
                configMapKeyRef:
                  key: merged_blocks_store_url
                  name: firehose-node-config
            - name: FIRST_STREAMABLE_BLOCK
              valueFrom:
                configMapKeyRef:
                  key: first_streamable_block
                  name: firehose-node-config
          command:
            - bash
            - "-c"
            - |
              exec /persistencecore/bin/firecosmos start reader \
                --reader-mode node \
                --reader-node-path /usr/bin/persistenceCore \
                --reader-node-args "start --x-crisis-skip-assert-invariants --home /persistencecore" \
                --reader-node-logs-filter "module=(p2p|pex|consensus|x/bank|x/wasm)" \
                --common-first-streamable-block $FIRST_STREAMABLE_BLOCK \
                --common-one-block-store-url "$ONE_BLOCK_STORE_URL" \
                --common-merged-blocks-store-url "$MERGED_BLOCKS_STORE_URL" \
                --data-dir /fh-data 
          resources:
            limits:
              cpu: "2"
              memory: "6G"
            requests:
              cpu: "2"
              memory: "6G"
          volumeMounts:
            - mountPath: /persistencecore
              name: node-pv-storage
            - mountPath: /config-graph
              name: config-graph
      volumes:
        - name: config-graph
          configMap:
            name: config-graph
        - name: scripts-graph
          configMap:
            name: scripts-graph
  volumeClaimTemplates:
  - metadata:
      name: node-pv-storage
    spec:
      storageClassName: do-block-storage
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 20Gi
